import{_ as e,c as a,o as t,V as o}from"./chunks/framework.P2w-sEqG.js";const u=JSON.parse('{"title":"Tables and DataFrames","description":"","frontmatter":{},"headers":[],"relativePath":"tables.md","filePath":"tables.md","lastUpdated":null}'),s={name:"tables.md"},n=o('<h1 id="4902128957212932471" tabindex="-1">Tables and DataFrames <a class="header-anchor" href="#4902128957212932471" aria-label="Permalink to &quot;Tables and DataFrames {#4902128957212932471}&quot;">â€‹</a></h1><p>Tables.jl provides an ecosystem-wide interface to tabular data in julia, giving interop with DataFrames.jl, CSV.jl and hundreds of other packages that implement the standard.</p><p>DimensionalData.jl implements the Tables.jl interface for <code>AbstractDimArray</code> and <code>AbstractDimStack</code>. <code>DimStack</code> layers are unrolled so they are all the same size, and dimensions similarly loop over array strides to match the length of the largest layer.</p><p>Columns are given the <code>name</code> or the array or the stack layer key. <code>Dimension</code> columns use the <code>Symbol</code> version (the result of <code>DD.dim2key(dimension)</code>).</p><p>Looping of unevenly size dimensions and layers is done <em>lazily</em>, and does not allocate unless collected.</p>',5),r=[n];function l(d,i,c,m,h,p){return t(),a("div",null,r)}const f=e(s,[["render",l]]);export{u as __pageData,f as default};
