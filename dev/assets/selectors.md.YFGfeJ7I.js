import{_ as e,c as t,o as a,V as o}from"./chunks/framework.-hqW-2cI.js";const g=JSON.parse('{"title":"Selectors and LookupArrays","description":"","frontmatter":{},"headers":[],"relativePath":"selectors.md","filePath":"selectors.md","lastUpdated":null}'),d={name:"selectors.md"},l=o('<h1 id="Selectors-and-LookupArrays" tabindex="-1">Selectors and LookupArrays <a class="header-anchor" href="#Selectors-and-LookupArrays" aria-label="Permalink to &quot;Selectors and LookupArrays {#Selectors-and-LookupArrays}&quot;">â€‹</a></h1><p><a href="http://localhost:5173/DimensionalData.jl/reference#lookuparrays" target="_blank" rel="noreferrer">http://localhost:5173/DimensionalData.jl/reference#lookuparrays</a></p><p>DimensionalData.jl <a href="./@ref"><code>Dimension</code></a>s in an <code>AbstractDimArray</code> or <code>AbstactDimStack</code> usually hold <a href="/DimensionalData.jl/dev/api/lookuparrays#DimensionalData.Dimensions.LookupArrays"><code>LookupArrays</code></a>.</p><p>These are <code>AbstractArray</code> with added features to facilitate fast and accurate lookups of their values, using a <a href="./@ref"><code>Selector</code></a></p><table><thead><tr><th style="text-align:left;">Selector</th><th style="text-align:left;">Description</th><th style="text-align:right;">Indexing style</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="/DimensionalData.jl/dev/api/lookuparrays#DimensionalData.Dimensions.LookupArrays.At"><code>At(x)</code></a></td><td style="text-align:left;">get the index exactly matching the passed in value(s)</td><td style="text-align:right;"><code>Int/Vector{Int}</code></td></tr><tr><td style="text-align:left;"><a href="/DimensionalData.jl/dev/api/lookuparrays#DimensionalData.Dimensions.LookupArrays.Near"><code>Near(x)</code></a></td><td style="text-align:left;">get the closest index to the passed in value(s)</td><td style="text-align:right;"><code>Int/Vector{Int}</code></td></tr><tr><td style="text-align:left;"><a href="/DimensionalData.jl/dev/api/lookuparrays#DimensionalData.Dimensions.LookupArrays.Contains"><code>Contains(x)</code></a></td><td style="text-align:left;">get indices where the value x falls within an interval in the lookup</td><td style="text-align:right;"><code>Int/Vector{Int}</code></td></tr><tr><td style="text-align:left;"><a href="/DimensionalData.jl/dev/api/lookuparrays#DimensionalData.Dimensions.LookupArrays.Where"><code>Where(f)</code></a></td><td style="text-align:left;">filter the array axis by a function of the dimension index values.</td><td style="text-align:right;"><code>Vector{Bool}</code></td></tr><tr><td style="text-align:left;">[<code>Not(x)</code>]</td><td style="text-align:left;">get all indices <em>not</em> selected by <code>x</code>, which can be another selector.</td><td style="text-align:right;"><code>Vector{Bool}</code></td></tr><tr><td style="text-align:left;">[<code>a .. b</code>]</td><td style="text-align:left;">get all indices between two values, inclusively.</td><td style="text-align:right;"><code>UnitRange</code></td></tr><tr><td style="text-align:left;">[<code>OpenInterval(a, b)</code>]</td><td style="text-align:left;">get all indices between <code>a</code> and <code>b</code>, exclusively.</td><td style="text-align:right;"><code>UnitRange</code></td></tr><tr><td style="text-align:left;">[<code>Interval{A,B}(a, b)</code>]</td><td style="text-align:left;">get all indices between <code>a</code> and <code>b</code>, as <code>:closed</code> or <code>:open</code>.</td><td style="text-align:right;"><code>UnitRange</code></td></tr><tr><td style="text-align:left;">[<code>Touches(a, b)</code>]</td><td style="text-align:left;">like <code>..</code> but includes all cells touched by the interval, not just inside it</td><td style="text-align:right;"><code>UnitRange</code></td></tr></tbody></table><p>Note: <code>At</code>, <code>Near</code> and <code>Contains</code> can wrap either single values or an <code>AbstractArray</code> of values, to select one index with an <code>Int</code> or multiple indices with a <code>Vector{Int}</code>.</p><p>Selectors find indices in the <code>LookupArray</code>, for each dimension. LookupArrays wrap other <code>AbstractArray</code> (often <code>AbstractRange</code>) but add aditional traits to facilitate fast lookups or specifing point or interval behviour.</p><p>Some common <code>LookupArray</code> that are:</p><table><thead><tr><th style="text-align:left;">LookupArray</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./@ref"><code>Sampled(x)</code></a></td><td style="text-align:left;">values sampled along an axis - may be <code>Ordered</code>/<code>Unordered</code>, <code>Intervals</code>/<code>Points</code>, and <code>Regular</code>/<code>Irregular</code></td></tr><tr><td style="text-align:left;"><a href="./@ref"><code>Categorical(x)</code></a></td><td style="text-align:left;">a categorical lookup that holds categories, and may be ordered</td></tr><tr><td style="text-align:left;"><a href="./@ref"><code>Cyclic(x)</code></a></td><td style="text-align:left;">an <code>AbstractSampled</code> lookup for cyclical values.</td></tr><tr><td style="text-align:left;"><a href="./@ref"><code>NoLookup(x)</code></a></td><td style="text-align:left;">no lookup values provided, so <code>Selector</code>s will not work. Not show in repl printing.</td></tr></tbody></table>',9),r=[l];function n(c,i,s,h,y,p){return a(),t("div",null,r)}const u=e(d,[["render",n]]);export{g as __pageData,u as default};
